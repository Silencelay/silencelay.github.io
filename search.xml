<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo使用typora设置图片路径</title>
      <link href="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/"/>
      <url>/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo本地图片显示问题"><a href="#hexo本地图片显示问题" class="headerlink" title="hexo本地图片显示问题"></a><code>hexo</code>本地图片显示问题</h3><p>使用<code>hexo</code>生成静态资源后,由于<code>url</code>的问题会出现图片加载的问题,现在网上的文章及官方的解决方案大概分为三种:</p><span id="more"></span><ol><li>将图片放入<code>source/images</code>目录下,每次<code>generate</code>都会生成图片,再使用相对或绝对路径进行引用</li><li>配置<code>hexo</code>的<code>_config.yml</code>文件, 将 <code>post_asset_folder</code> 设置为<code>true</code>, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径. </li><li>使用<code>hexo</code>官方的解决方案,使用模版变量, <code>&#123;% asset_img slug [title] %&#125; </code></li></ol><p>但是在配置过程中发现这三种方式都多多少少存在一些问题,前两种首页跟内容页会有一个加载失败的问题,而第三种则失去了<code>markdown</code>的意义.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>打开根目录下的配置文件_config.yml，设置post_asset_folder  为 true</p><p><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124229275.png" alt="image-20220705124229275"></p></li><li><p>安装插件 asset-image </p><p><code>npm install https://github.com/CodeFalling/hexo-asset-image </code></p></li><li><p>typora设置图片为相对路径 </p><p><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124325939.png" alt="image-20220705124325939"></p></li><li><p>hexo new “文章标题“后，可以发现同时出现了同名的文件夹，当你在typora上编辑图片时，图片自动存储在该文件夹下。</p><p><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124615204.png" alt="image-20220705124615204"><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124256479.png" alt="image-20220705124256479"><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124637948.png" alt="image-20220705124637948"></p></li><li><p>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s 运行在浏览器上查看效果</p></li></ol><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>hexo 默认的图片路径 permalink （永久链接）是<code>年/月/日/title</code><br>如果是中文标题后面就是一长串的urlencoded的中文。<br>觉得丑可以考虑改掉。 front-matter 或者 site config 里改都行</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建你的个人博客</title>
      <link href="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/"/>
      <url>/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="使用GitHub-page-hexo快速搭建个人博客"><a href="#使用GitHub-page-hexo快速搭建个人博客" class="headerlink" title="使用GitHub page + hexo快速搭建个人博客"></a>使用GitHub page + hexo快速搭建个人博客</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文面向无基础学生，博客为静态博客，无需费用，使用的工具和框架：GitHub Pages + hexo。</p><h4 id="为什么要搭建个人博客"><a href="#为什么要搭建个人博客" class="headerlink" title="为什么要搭建个人博客"></a>为什么要搭建个人博客</h4><span id="more"></span><ul><li>将自己的思考和学习经历记录下来作为一个知识沉淀的平台</li><li>在搭建博客和升级博客的过程中学习技术</li><li>展示你自己，并且可以作为他人了解你的渠道</li><li>成为社区的一份子，帮助到他人，博客中记录的bug和经历可以让更多的人少走弯路</li></ul><h4 id="GitHub-Pages-hexo"><a href="#GitHub-Pages-hexo" class="headerlink" title="GitHub Pages + hexo"></a>GitHub Pages + hexo</h4><p>Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。</p><p>支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>安装<a href="https://nodejs.org/zh-cn/">Node.js</a>和<a href="https://git-scm.com/">Git</a>并注册<a href="https://github.com/">GitHub</a></p><p>安装 <a href="https://link.segmentfault.com/?enc=lkF3f/CyE05tcDwXn7JWDw==.FzsCu9urplyKm66FuzB30IP26lmgUA5jiB8EdFYqqb0=">NodeJS</a>，因为 <a href="https://link.segmentfault.com/?enc=JfzEjiqjSQZA3WooMLMwgw==.hrSnx/Cxh1fRg2KdfYm5U01rcs3aD5/79tB/Lixh8gw=">Hexo</a> 是基于 Node.js 驱动的一款博客框架</p><p>安装 <a href="https://link.segmentfault.com/?enc=OZeZ9V93LS1qX7hIibSJBg==.7usyNdX/Ft0z01o+cdDa1zpaIC9WhNL2dXVB3YcpObw=">git</a>，一个分布式版本控制系统，用于项目的版本控制管理</p><p>注册<a href="https://github.com/">GitHub</a> 部署在Github Page</p><p>安装成功检验是否成功，在命令行执行下列命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> --version<span class="token function">git</span> version <span class="token number">2.36</span>.0.windows.1$ <span class="token function">node</span> --versionv16.15.1$ <span class="token function">npm</span> --version<span class="token number">8.11</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 <a href="https://link.segmentfault.com/?enc=KFP/AYOYWMJQa6qMmR5g6Q==.MuX8vOqbzEEPsphSagAlE4LcK1HT00LmCcZBvnUHhLg=">Hexo</a> 的详细文档。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment"># -g 代表着全局安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hexo的基本命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"postName"</span> <span class="token comment">#新建文章</span>hexo new page <span class="token string">"pageName"</span> <span class="token comment">#新建页面</span>hexo generate <span class="token comment">#生成静态页面至public目录</span>hexo server <span class="token comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>hexo deploy <span class="token comment">#部署到GitHub</span>hexo <span class="token builtin class-name">help</span>  <span class="token comment"># 查看帮助</span>hexo version  <span class="token comment">#查看Hexo的版本</span>对应的缩写，比如：hexo n <span class="token operator">==</span> hexo newhexo g <span class="token operator">==</span> hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>报错：</strong></p><p><code>npm WARN config global </code>–global<code>, </code>–local<code>are deprecated. Use</code>–location&#x3D;global<code> instead&quot;</code></p><p><strong>解决：</strong></p><ol><li>Go to folder <code>C:\Program Files\nodejs</code></li><li>You have to edit four files named <code>npm</code>, <code>npm.cmd</code></li><li>Open the files in a text editor, like <a href="https://en.wikipedia.org/wiki/Visual_Studio_Code">Visual Studio Code </a> or 记事本</li><li>Replace <code>prefix -g</code> with <code>prefix --location=global</code> in all four files</li><li>Save all (if asked, save as administrator)</li><li>Good to go!</li></ol><h3 id="建立博客"><a href="#建立博客" class="headerlink" title="建立博客"></a>建立博客</h3><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init blogName$ <span class="token builtin class-name">cd</span> blogName$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── _config.yml <span class="token comment"># 网站的配置信息，您可以在此配置大部分的参数。 </span>├── package.json├── scaffolds <span class="token comment"># 模版文件夹</span>├── <span class="token builtin class-name">source</span>  <span class="token comment"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><span class="token operator">|</span>   ├── _drafts <span class="token comment"># 草稿文件</span><span class="token operator">|</span>   └── _posts <span class="token comment"># 文章Markdowm文件 </span>└── themes  <span class="token comment"># 主题文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/image-20220705112740924.png" alt="image-20220705112740924"></p><h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><p>命令：hexo g</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo gINFO  Validating configINFO  Start processingINFO  Files loaded <span class="token keyword">in</span> <span class="token number">59</span> msINFO  <span class="token number">0</span> files generated <span class="token keyword">in</span> <span class="token number">17</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网页本地预览"><a href="#网页本地预览" class="headerlink" title="网页本地预览"></a>网页本地预览</h3><p>命令：hexo s</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo sINFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.INFO  See you again<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器访问上述链接：<a href="http://localhost:4000/">http://localhost:4000/</a> 预览效果</p><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/defb69f9-e4a3-4a70-881c-897425ec5726.png" alt="img"></p><p>可以看到访问没问题，但是只是在本地预览，“Press Ctrl+C to stop.” 接着将这个博客部署到github。</p><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><p><strong>新建仓库</strong>，注意！注意！注意！</p><p>一定要填写.github.io后缀 不然就创建成普通项目了</p><p>创建完成会自动生成<a href="https://link.segmentfault.com/?enc=oHQGX+DOBZxvR9rq6nqMXg==.r9aw8D1SVwglWO9wtkklGXDDb+rYBSgofnWmp6LfLGG0nprfw28pxj/IewDY74ZP">https://gongchenghuigch.githu...</a> 这样的访问地址</p><p>Github 仅能使用一个同名仓库的代码托管一个静态站点</p><blockquote><p>仓库名称格式： 用户名.github.io</p></blockquote><p>这个仓库名称将作为你github博客的访问地址<img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/1460000017990241.jpeg" alt="image"></p><p><strong>打开项目根目录下的 _config.yml 配置文件配置参数</strong></p><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/1460000017990250.jpeg" alt="image"></p><p>repository仓库地址改为自己的</p><pre class="line-numbers language-none"><code class="language-none">repository不要写成git clone的https的地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误写法：</p><pre class="line-numbers language-dts" data-language="dts"><code class="language-dts">deploy:  type: git  repository: https:&#x2F;&#x2F;github.com&#x2F;gongchenghuigch&#x2F;gongchenghuigch.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>branch看自己的github仓库是master还是main，这里是main，就填写main</p><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/8d9b82b4-16e4-4b1e-bbbe-ce8f66b6f4da.png" alt="img"></p><p><strong>要安装一个部署插件 <a href="https://link.segmentfault.com/?enc=OSsIKOj0z3U2JHdeloUTTg==.NGsL1IMfItefEYYPOieHp6YDMoVg0i27IRcbsn2B/Elt2bWY6pnEZaiSlirvZx+p">hexo-deployer-git</a></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等一会，在浏览器访问网址： <a href="https://link.segmentfault.com/?enc=xmfM7atrIxUwr74D20foUg==.Z8NmJW38ZsSfuG+U+weOTEFGflpH/bdXEhPxNb0Nu+JysZPyqU60rF1jQ0E1xwel38V+WgsV1pAdimboR6M52A==">https:&#x2F;&#x2F;你的用户名.github.io</a> 就会看到你的博客啦！！</p><h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><p>新建一篇博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">'文章标题'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完成后可以在<code>/source/_posts</code>下看到一个“文章标题.md”的文章文件啦，<code>.md</code> 就是 Markdown 格式的文件，使用Markdown编辑器打开并编辑。</p><p>默认的内容是这样的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> chenge<span class="token punctuation">-</span>first<span class="token punctuation">-</span>blog<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-07-04 13:23:59</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">---</span>这里下方开始编写正文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始编写博客内容（markdown格式）</p><p>保存后，开始部署到github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g -d <span class="token comment"># 快速部署</span>$ hexo g <span class="token comment"># hexo generate生成生成html静态文件</span>$ hexo s <span class="token comment"># hexo server启动服务器本地预览。默认情况下，访问网址为：`http://localhost:4000/`</span>$ hexo d <span class="token comment"># hexo deploy上传到github</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可以在<code>public</code>文件夹下看到完整的静态文件。</p><p>浏览器中输入<code>http://localhost:4000/</code>就可以看到预览效果了。</p><p>启动浏览器并转到<code>https://username.github.io</code>你就可以看到自己的博客啦！</p><p>部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 &#x2F;source&#x2F;_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/05/hello-world/"/>
      <url>/2022/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
