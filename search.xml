<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>认识Web</title>
      <link href="/2022/07/09/ren-shi-web/"/>
      <url>/2022/07/09/ren-shi-web/</url>
      
        <content type="html"><![CDATA[<p>博客（Blog）就是一个Web网站，原本名字叫 Weblog，网络日志，然后人们把 We 和 blog 拆开，就有了博客。主要是针对个人记录的一种网站类型，具有记录和交流的属性。</p><p>参考：<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%AA%8C">博客 - 维基百科</a>， 摘录一段：</p><blockquote><p>博客最初的名称是Weblog，由web和log两个单词组成，按字面意思就是网络日记，后来喜欢新名词的人把这个词的发音故意改了一下，读成we blog，由此，blog这个词被创造出来。中文意思即網誌或网络日志，不过，在中国大陆有人往往也将Blog本身和blogger（即博客作者）均音译为“博客”。“博客”有较深的涵义：“博”为“广博”；“客”不单是“blogger”更有“好客”之意，看Blog的人都是“客”。而在台湾，则音译成“部落格”或“網誌”，书写者为“部落客”，认为Blog本身有社群组群的意含在内，借由Blog可以将网络上网民集结成一个大部落，成为另一个具有影响力的自由媒体。</p></blockquote><p>类似 WordPress、Hexo 等工具其实是一些辅助我们生成博客类型的网站的工具，通过它们我们可以很轻易地将我们的想法和记录发布到 Web 上。直接基于 Markdown 生成 HTML 工作量要小很多很多。</p><h2 id="1-Internet-与-Web"><a href="#1-Internet-与-Web" class="headerlink" title="1. Internet 与 Web"></a>1. Internet 与 Web</h2><p>Internet （因特网 &#x2F; 互联网）是物理意义上的概念，意为全球最大的计算机互联网络，设备连上因特网后，可互相收发数据，各种应用也在 internet 网络通信的基础之上进行（如 Web、邮件、类似微信 QQ 的 IM 应用等等）。</p><p>Web 全称为 World Wide Web，也简称 WWW，中文称为“万维网”，是一个互相链接的文档系统。用户可以通过文档里的“链接”，找到另一个文档，这里的文档与文档之间的链接之间的组合，形成了巨大的“网络”。</p><p>Web 开发，也是围绕着这样的一个<strong>文档系统</strong>展开各种工作。</p><h2 id="2-超文本与超链接"><a href="#2-超文本与超链接" class="headerlink" title="2. 超文本与超链接"></a>2. 超文本与超链接</h2><p>上面说到的“文档系统”概念十分笼统，它可以是 PDF、可以是 Word 的 docx 格式、也可以是其他各种各样的文件，我们接触最多的还是 <strong>网页</strong>，网页是专门为万维网设计的一种文档类型。</p><p>网页由<strong>超文本</strong>构成，<strong>超文本</strong>与一般文档的区别，主要在于它强调其中<strong>超链接</strong>的属性，用户可借助<strong>超链接</strong>跳转到其他的网页，也可以通过<strong>超链接</strong>加载到文档内嵌的资源，以此构造出上述的文档网络。</p><p>我们需要一些方式去表达<strong>超链接</strong>，链接实现的方式多种多样，类似某些海报上的地址、QQ号、微信文章链接、公众号、微信小程序码等，凡是可以帮助用户找到某个资源的东西，我们都可以称为“超链接”。日常大家都叫它“网址(web address)”、“链接(link)”。</p><p>现代网页的源代码(HTML)中超链接被命名为 <strong>Anchor</strong>，也就是“<strong>锚</strong>”。脑洞地说，于我们而言，我们上网就像是在在信息的海洋驾驶一艘船，锚便就是船在海洋中的一个个落脚点，在网络的海洋中，船的驾驶速度只发生在0.几秒之间，更多的时间是在抛锚之后的阅读中度过。</p><h3 id="2-1-URL-是什么？"><a href="#2-1-URL-是什么？" class="headerlink" title="2.1 URL 是什么？"></a>2.1 URL 是什么？</h3><p>为了实现不同平台的链接统一，早期的万维网设计者们达成了统一的超链接标准，名叫 <strong>URL</strong>（<strong>Uniform Resource Locator</strong>，<strong>统一资源定位符</strong>）。URL 是一段特定格式的字符串，俗称“网址”，告诉计算机如何获取某一资源。三个字母分别为三个单词的缩写，对应了它的三个属性：</p><ol><li><strong>U</strong>niform: 统一的标准</li><li><strong>R</strong>esource: 针对某个特定资源，如文档、图片、音频、视频等等文件</li><li><strong>L</strong>ocator: 定位器，也就是获取这个资源的途径和方法</li></ol><p>以下是一些常见的 URL：</p><ul><li><a href="http://www.baidu.com/">http://www.baidu.com/</a></li><li><a href="http://202.115.72.8/dzzn.htm">http://202.115.72.8:80/dzzn.htm</a></li><li><a href="https://m.weibo.cn/u/1251000504?jumpfrom=weibocom">https://m.weibo.cn/u/1251000504?jumpfrom=weibocom</a></li><li><a href="https://zhuanlan.zhihu.com/p/22561084">https://zhuanlan.zhihu.com/p/22561084</a></li><li><a href="https://tools.ietf.org/rfc/rfc2616.txt">https://tools.ietf.org/rfc/rfc2616.txt</a></li><li><a href="https://cs50.harvard.edu/college/2019/fall/guide.pdf">https://cs50.harvard.edu/college/2019/fall/guide.pdf</a></li><li><a href="ftp://ftp.freebsd.org/pub/FreeBSD/">ftp://ftp.freebsd.org/pub/FreeBSD/</a></li></ul><p>对比一下，看似杂乱无章的一串字符之中，你可能会发现一些规律所在，没错，这里的规律，设计者最初是这样定义的：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">URI = scheme:[//authority]path[?query][#fragment]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>各个部分的解释如下：</p><ul><li>scheme: 资源的请求方法（使用的网络协议）</li><li>authority: 关于需要请求的提供者的服务器的地址、端口信息</li><li>path: 资源在提供者的服务器的路径</li><li>query: 针对这个资源的查询参数</li><li>fragment: 查询片段</li></ul><p>其中，<code>[]</code> 内的内容是可选的，也就是说，并不需要所有部分都满足，可能只有 <code>scheme:[//authority]path</code> 这部分。</p><p>一台计算机向另外一台计算机请求资源时，需要确认三点信息，这三点信息分别与 URL 的组成成分的关系如下：</p><ol><li>该找谁获取资源：服务器的IP&#x2F;域名、端口号 （authority）</li><li>怎么样获取资源：通信协议（scheme）</li><li>获取对方什么资源：资源路径 （path）</li></ol><p>服务器(authority)信息具体是这么定义的：</p><pre class="line-numbers language-none"><code class="language-none">authority &#x3D; [userinfo@]host[:port]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>日常我们能看到最多的是其中的 host 部分，它可能是 <code>www.baidu.com</code> 这样子的域名，也可以是 <code>202.115.72.8</code> 这样的 IP 地址，偶尔可能会有 port 这部分。</p><p>关于 URL 更详细的定义，参考 <a href="https://tools.ietf.org/html/rfc3986">RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax</a>。</p><h3 id="2-2-URL-的例子"><a href="#2-2-URL-的例子" class="headerlink" title="2.2 URL 的例子"></a>2.2 URL 的例子</h3><p>首先我们看这个：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;cs50.harvard.edu&#x2F;college&#x2F;2019&#x2F;fall&#x2F;guide.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>按照 <strong>https</strong> 的规则（协议），连接互联网中域名为 <strong>cs50.harvard.edu</strong> 的服务器，获得路径 <strong>&#x2F;college&#x2F;2019&#x2F;fall&#x2F;guide.pdf</strong> 下的资源（文件）</p></blockquote><p>因为格式是 PDF，浏览器会用 PDF 阅读器去展示获取到的这个文件。</p><p>这个 URL，其中包含的信息点分别是：</p><table><thead><tr><th align="left">元素</th><th align="left">信息</th></tr></thead><tbody><tr><td align="left">https</td><td align="left">这个资源的获取过程遵循 <strong>https</strong> 协议</td></tr><tr><td align="left">cs50.harvard.edu</td><td align="left">通过 <strong>cs50.harvard.edu</strong> 所指向的服务器获得资源</td></tr><tr><td align="left">&#x2F;college&#x2F;2019&#x2F;fall&#x2F;guide.pdf</td><td align="left">这个资源在服务器的具体路径是 <strong>&#x2F;college&#x2F;2019&#x2F;fall&#x2F;guide.pdf</strong></td></tr></tbody></table><p>再举两个例子：</p><ol><li><p><a href="ftp://ftp.freebsd.org/pub/FreeBSD/">ftp://ftp.freebsd.org/pub/FreeBSD/</a></p><blockquote><p>“按照 <strong>ftp</strong> 的规则（协议），连接互联网中域名为 <strong>ftp.freebsd.org</strong> 的服务器，获得路径 <strong>&#x2F;pub&#x2F;FreeBSD&#x2F;</strong> 下的资源（文件）”</p></blockquote></li></ol><table><thead><tr><th align="left">元素</th><th align="left">信息</th></tr></thead><tbody><tr><td align="left">ftp</td><td align="left">这个资源的获取过程遵循 <strong>ftp</strong> 协议</td></tr><tr><td align="left">ftp.freebsd.org</td><td align="left">这个资源是通过 <strong>ftp.freebsd.org</strong> 所指向的服务器获得的</td></tr><tr><td align="left">&#x2F;pub&#x2F;FreeBSD&#x2F;</td><td align="left">这个资源在服务器的具体路径是 <strong>&#x2F;pub&#x2F;FreeBSD&#x2F;</strong></td></tr></tbody></table><ol start="2"><li><p><a href="http://202.115.72.8/dzzn.htm">http://202.115.72.8/dzzn.htm</a></p><blockquote><p>“按照<strong>http</strong> 的规则（协议），连接互联网中域名为 <strong>202.115.72.8</strong> 的服务器，获得路径 <strong>&#x2F;dzzn.htm</strong> 下的资源（文件）”</p></blockquote></li></ol><table><thead><tr><th align="left">元素</th><th align="left">信息</th></tr></thead><tbody><tr><td align="left">http</td><td align="left">这个资源的获取过程遵循 <strong>http</strong> 协议</td></tr><tr><td align="left">202.115.72.8</td><td align="left">这个资源是通过 <strong>202.115.72.8</strong> 所指向的服务器获得的</td></tr><tr><td align="left">&#x2F;dzzn.htm</td><td align="left">这个资源在服务器的具体路径是 <strong>&#x2F;dzzn.htm</strong></td></tr></tbody></table><p>浏览器内部得到地址栏输入的 URL，将这串字符分解，得到以上说的<strong>请求方法</strong>、<strong>服务器地址</strong>、<strong>路径</strong>等信息点，然后按照协议的<strong>请求方法</strong>，连接上这里描述的<strong>服务器地址</strong>，然后按照<strong>路径</strong>请求下载对应的资源。</p><p>一般来说，为了方便记忆，很多时候上网只需要记一个域名，剩下的请求方法、路径什么的浏览器会自动帮我们补全，比如说，我们在浏览器输入 <code>qq.com</code>，实际上浏览器会自动补充到 <code>http://qq.com/</code> 这个完整的 URL，然后再访问目标。</p><p>正是浏览器和服务商们都遵循了这个统一的标准，只需简单几个字母和符号，便可以把我们带入一个个精彩纷呈的信息世界。</p><h3 id="2-3-URL-链接分享-VS-二维码扫码"><a href="#2-3-URL-链接分享-VS-二维码扫码" class="headerlink" title="2.3 URL 链接分享 VS 二维码扫码"></a>2.3 URL 链接分享 VS 二维码扫码</h3><p>可以发现，URL的本身就能够包含一些摘要作用的信息，但由于URL本身<a href="http://www.w3school.com.cn/tags/html_ref_urlencode.html">只支持 ASCII 字符</a>，在表示其它的语言的时候，需要进行 urlencode 编码，这样的操作也仅仅是在英文世界通用。</p><p>分享URL链接时，如果附带一些摘要、快速预览的功能，就可以减少许多时间成本以及隐私跟踪参数、钓鱼链接等不可控风险。</p><p>实际上，转发到微信的公众号文章的背后，也是一个 URL，只是被微信有意地隐藏了起来，微信公众平台也对摘要这样的操作做了一些可视化的要求。</p><p>其他平台做出的预览海报分享也做得很好，通用而舒适但又不失对用户的知情权和隐私的尊重，还能激发探索的好奇心的海报模板和辅助生成预览海报。</p><p>URL本身有可能从域名的可信度，路径和参数看出其中可能存在的问题，而二维码的形式，我们是完全无法下意识感知出那些细微的差异和隐藏的信息。</p><p>所以我认为，扫码工具在获得二维码背后的 URL，尽可能在图片中展示一个完整的 URL 也是有必要的，打开之前，应该对不明的 URL 有所提示。二维码的本质，就像超市商品的条码、书籍的 ISBN 条码一般，只是一个辅助输入的工具，并不能完全取代 URL 的一切。在二维码普及的今天，若不普及 URL 的知识，人们对于二维码背后是啥漠不关心的话，强调再多的“别扫”、“别点”、“别接”，带来的更多的还是因噎废食。</p><h2 id="3-超文本传输协议"><a href="#3-超文本传输协议" class="headerlink" title="3. 超文本传输协议"></a>3. 超文本传输协议</h2><p>由上节内容我们可以发现，URL 的 scheme 部分各不相同，我们可以看到 <strong>http</strong> &#x2F; <strong>https</strong> &#x2F; <strong>ftp</strong> 三种协议。其中最常见的，还是 HTTP 或 HTTPS 协议，HTTPS 与 HTTP 的区别在于，HTTPS 在 HTTP 的基础上，多了一层安全加密传输的包装。所以说，对于 Web 开发而言，最最核心的，还是 <strong>HTTP 协议</strong>。</p><p>HTTP 协议全称 <strong>Hypertext Transfer Protocol</strong>，中文名是“<strong>超文本传输协议</strong>”，这一协议主要是针对超文本的数据传输而设计的。HTTP 协议分为 HTTP 请求与 HTTP 响应两个过程，客户端向服务端发送 HTTP 请求，服务端收到请求处理后，将对应数据返回到客户端。</p><p>类似这样由客户端和服务端组成的应用形态又叫<strong>客户端-服务器架构</strong>，英文简称 C&#x2F;S 架构，如图：<img src="/2022/07/09/ren-shi-web/1599243931408-298d1359-0253-4df3-8f4f-4a1f96f8e32f.png" alt="image.png"></p><p>这里我们只做一个概览，具体协议细节暂不做深究，若想更深入地了解，可以阅读 MDN 官网上的教程：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/How_the_Web_works">万维网是如何工作的 - MDN</a>。</p><h2 id="4-Web-浏览器"><a href="#4-Web-浏览器" class="headerlink" title="4. Web 浏览器"></a>4. Web 浏览器</h2><p>浏览器就是一个浏览网页的工具，它工作在上述 <strong>C&#x2F;S架构</strong> 模型的客户端“Client”这一侧，帮助我们请求某个目标页面的网址（URL）、下载页面和嵌入的资源、展示页面内容供我们浏览。常用的浏览器至少包含三个元素：</p><ol><li><strong>导航条</strong>：后退、前进、刷新、回到主页等等功能</li><li>地址栏：当前展示网页的 URL（网址）</li><li>展示超文本的<strong>内容区域</strong></li></ol><p><img src="/2022/07/09/ren-shi-web/1598118889190-cfb36e99-e3ee-47ea-ba2a-81c3a93344f0.png" alt="image.png"></p><p>在客户端开发中，系统为应用提供了 WebView 组件，WebView 相当于一个隐藏了地址栏和导航的浏览器，主要用途是在 App 中嵌入网页内容。</p><p>随着手机性能的提高，HTML5 网页在移动端体验越来越好，有的 App 直接用 WebView 承载应用向的逻辑，这样的 App 又叫作 Hybrid App。</p><p><img src="/2022/07/09/ren-shi-web/1598367863476-b2b9979f-d769-4b4e-89b5-3aaa7349548b.png" alt="image.png"></p><h2 id="5-Web-服务器"><a href="#5-Web-服务器" class="headerlink" title="5. Web 服务器"></a>5. Web 服务器</h2><p>我们常说的“服务器”一般指的是硬件层面的机器，而 “Web 服务器” 并不是指某台具体的机器，而是和浏览器一样，属于应用软件层面的概念，它工作在 <strong>C&#x2F;S 架构</strong> 的 <strong>Server</strong> 这一侧，负责接收客户端的请求，生成响应并返回给客户端。</p><p>客户端请求与响应的形态以 HTTP 请求与 HTTP 响应为主。前面我们提到，Web 主要依赖 HTTP 协议工作，但随着 Web 的发展，还涉及到 WebSocket、WebRTC 等特定应用领域的协议。其中细节较为繁杂，不太适合在入门时展开，所以这里只讨论 HTTP 协议部分，待你对这里涉及的主干知识有所把握的时候，再入手也不迟。</p><h3 id="5-1-原始形态——静态网页"><a href="#5-1-原始形态——静态网页" class="headerlink" title="5.1 原始形态——静态网页"></a>5.1 原始形态——静态网页</h3><p>最早期的网站提供的资源都是“静态”的，在网站中以文件系统的“文件”和“文件夹”的概念组织所有的<strong>资源</strong>，每一个<strong>资源</strong>在文件系统中都有一个确定的“文件路径”。访问某个资源的过程，也正是从远程服务器的文件系统中拉取某个文件数据的过程。</p><p>这里举一个例子：中科大为教师提供了一个主页服务器（<a href="http://staff.ustc.edu.cn/%EF%BC%89%EF%BC%8C%E5%AE%83%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E7%BD%91%E7%AB%99%E3%80%82%E6%AF%8F%E4%B8%80%E4%BD%8D%E8%80%81%E5%B8%88%E9%83%BD%E5%8F%AF%E4%BB%A5%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE%E7%A8%8B%E6%88%96%E4%B8%AA%E4%BA%BA%E3%80%81%E5%AE%9E%E9%AA%8C%E5%AE%A4%E4%BB%8B%E7%BB%8D%E7%9A%84%E5%AD%90%E7%AB%99%E7%82%B9%E3%80%82">http://staff.ustc.edu.cn/），它是一个完整的网站。每一位老师都可以建立一个属于自己的课程或个人、实验室介绍的子站点。</a></p><p>搜索引擎随手找到两个“静态网站”的例子：</p><ol><li>计算机体系结构课程：<a href="http://staff.ustc.edu.cn/~comparch/">http://staff.ustc.edu.cn/~comparch/</a></li><li>金属稳定同位素实验室：<a href="http://staff.ustc.edu.cn/~fhuang/">http://staff.ustc.edu.cn/~fhuang/</a></li></ol><p>它们对应的本地目录结构是这样的：<img src="/2022/07/09/ren-shi-web/1599291279389-4184b36e-195d-42b3-8d83-63fa9fb5148d.png" alt="image.png"></p><p>Web 服务器要做的，便是根据请求 URL 中的 path，和站点在文件系统的根路径（WebRoot）拼接，形成对应资源在文件系统中的完整路径，然后读取这个路径的文件数据，将数据以 HTTP 响应的形式返回给客户端（浏览器）。</p><p>一般 Web 服务器软件会部署在机房的一台一直保持不关机运行的机器上，用户可以用 FTP 协议访问服务器，上传下载站点对应的资源文件，机器上的 Web 服务器软件会配置好网站的 WebRoot、域名、端口等信息。</p><p>在 <a href="http://staff.ustc.edu.cn/">http://staff.ustc.edu.cn/</a> 你可以看到对应的说明：</p><p><img src="/2022/07/09/ren-shi-web/1599291721456-10aa32b0-ff63-490b-b886-7ec032f2ccf5.png" alt="image.png"></p><h3 id="5-2-当下形态"><a href="#5-2-当下形态" class="headerlink" title="5.2 当下形态"></a>5.2 当下形态</h3><p>Web 发展到现在，已不仅仅是传统的文档资源分享与链接系统。基于文档的动态脚本（JavaScript）能力、后端动态生成数据的能力，Web 体系已衍生出一种新的应用形态：<strong>Web App</strong>。</p><p>对 Web App 来说，服务器端也不仅有简单的读取文件返回数据的功能，需要承载许多业务流程和数据交互，且可能涉及到巨大请求量的处理（比如淘宝）。由此，人们对 Web 服务器的功能与性能，有了更多的要求。这一切不是一个软件就能实现的，而是多个软件组成的完整应用架构（技术栈）。</p><p>在这个背景下的 Web 服务器软件，除了读取静态文件并输出以外，还需要做一些请求分发的工作，涉及<strong>规则匹配与路由分发</strong>、<strong>协议转换</strong>、<strong>请求转发（反向代理）</strong>等步骤，对应调用后端程序的处理逻辑。后端程序维护与用户的访问会话 （session），将用户的请求，转向对应的业务逻辑处理，这其中可能涉及到数据库数据的增删改查操作，还有对其他各种服务（缓存、消息队列、支付 API 等等）的调用。</p><p>实现 Web 服务和后端的逻辑，并不局限于特定的编程语言，只要按照对应协议（主要是 HTTP）处理数据即可。业界有但不限于 Java, Golang, PHP, PHP, Node.js, Ruby, C#, Rust, C++ 等语言下的后端实现。代码与架构的复杂程度，取决于业务的复杂度和站点的访问压力。</p><p>后端工程师通常需要根据业务形态、语言生态、开发效率、维护难度等方面综合考虑，得出一套适合当下业务模式的后端方案。因此后端的领域也是千奇百怪，满足所有场景的银弹是不存在的。</p><h2 id="6-理念"><a href="#6-理念" class="headerlink" title="6. 理念"></a>6. 理念</h2><p>Web 技术的方方面面都透着它的核心理念，那就是<strong>开放（Open）</strong>、<strong>去中心化（Decentralized）</strong>。在 internet 之下，任何人都可以部署服务器发布网站，任何网站内容都能相互链接，任何厂商都能开发浏览器和服务器，开发者们通过这样的约定，共同构建属于全人类的信息网络。</p><p>保持这样的开放需要的是标准化，万维网联盟 <a href="https://www.w3.org/">World Wide Web Consortium (W3C)</a> 正是面向 Web 标准化工作的一个非盈利组织，通过标准解决不同平台、技术的不兼容问题，促进网络信息的顺利完整流通；另外还有一个由浏览器厂商发起的组织 <a href="https://whatwg.org/">Web Hypertext Application Technology Working Group (WHATWG)</a>，相较于 W3C，WHATWG 事实上决定了 Web 的未来发展方向。</p><p>这也体现了 Web 的设计初衷和当下的定位的差异，原教旨的 Web 开发，核心点在于一个去中心化、分布式的文档资料库，秉承着“知识属于全人类，应该尽可能开发普惠”的朴素愿景；而更多的时候，人们 Web 的价值在于一个与人连接的业务系统，核心在于“解决业务问题的工具”，在跨平台应用开发技术中，Web 在开发效率和兼容性方面占据了极大优势，也意味着绝大多数的开发者，并不太 care Web 作为资料库的那部分角色的细节。</p><p><strong>在价值的驱动下，在中国大陆通行的是类似微信的封闭生态，更倾向于封闭与管控，而不在于开放与互联。为实现商业利益的最大化，它把蓬勃发展的 Web 技术作为辅助客户端表达的一种工具，对用户隐藏了 URL 等相对复杂概念，取而代之的是笼统的“链接”和二维码&#x2F;小程序码等只能在平台内通行的链接。微信所谓的“开放“的前提，在于一切都在它的控制之下，将生态牢牢控制在手中。</strong></p><p>作为 Web 开发者，虽说理想总要对现实作出让步，无论于内容还是技术，尽可能让其接近互联网开放、普惠、人人都可平等地接收知识的初衷，能走得更远。尤其值得关注的是，类似微信这样的 App，如公众号文章、小程序等场景，还是重度依赖 Chromium 与 iOS 的 WKWebView，所以也受制于 Web 技术的发展。</p><h2 id="7-分工"><a href="#7-分工" class="headerlink" title="7. 分工"></a>7. 分工</h2><p>Web 开发一般我们也按前端与后端分工：</p><ul><li>Web 前端：主要负责 <strong>浏览器&#x2F;WebView</strong> 端的页面开发，主要处理文档与内容的展示，以及页面与用户的交互的问题</li><li>Web 后端：负责<strong>服务器端的架构与业务开发</strong>，着力于如何生成与输出前端需要的内容，还有与前端需要的各种后台业务逻辑的接口（如用户会话的登录与退出、订单、用户输入内容的处理等等）、相关软件的底层开发</li></ul><p>细分下还会涉及到运维、还有互相配合的产品、设计、测试的角色等等。</p><p>由于技术的发展，前后端的边界事实上越来越模糊，前端也不仅仅是 “Web 前端”，因此也有了类似 “Web 全栈工程师” 的角色，以 Web 开发为核心，不设限地去承接和处理各类 Web 系统相关的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用typora设置图片路径</title>
      <link href="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/"/>
      <url>/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo本地图片显示问题"><a href="#hexo本地图片显示问题" class="headerlink" title="hexo本地图片显示问题"></a><code>hexo</code>本地图片显示问题</h3><p>使用<code>hexo</code>生成静态资源后,由于<code>url</code>的问题会出现图片加载的问题,现在网上的文章及官方的解决方案大概分为三种:</p><span id="more"></span><ol><li>将图片放入<code>source/images</code>目录下,每次<code>generate</code>都会生成图片,再使用相对或绝对路径进行引用</li><li>配置<code>hexo</code>的<code>_config.yml</code>文件, 将 <code>post_asset_folder</code> 设置为<code>true</code>, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径. </li><li>使用<code>hexo</code>官方的解决方案,使用模版变量, <code>&#123;% asset_img slug [title] %&#125; </code></li></ol><p>但是在配置过程中发现这三种方式都多多少少存在一些问题,前两种首页跟内容页会有一个加载失败的问题,而第三种则失去了<code>markdown</code>的意义.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>打开根目录下的配置文件_config.yml，设置post_asset_folder  为 true</p><p><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124229275.png" alt="image-20220705124229275"></p></li><li><p>安装插件 asset-image </p><p><code>npm install https://github.com/CodeFalling/hexo-asset-image </code></p></li><li><p>typora设置图片为相对路径 </p><p><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124325939.png" alt="image-20220705124325939"></p></li><li><p>hexo new “文章标题“后，可以发现同时出现了同名的文件夹，当你在typora上编辑图片时，图片自动存储在该文件夹下。</p><p><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124615204.png" alt="image-20220705124615204"><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124256479.png" alt="image-20220705124256479"><img src="/2022/07/05/hexo-shi-yong-typora-she-zhi-tu-pian-lu-jing/image-20220705124637948.png" alt="image-20220705124637948"></p></li><li><p>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s 运行在浏览器上查看效果</p></li></ol><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>hexo 默认的图片路径 permalink （永久链接）是<code>年/月/日/title</code><br>如果是中文标题后面就是一长串的urlencoded的中文。<br>觉得丑可以考虑改掉。 front-matter 或者 site config 里改都行</p>]]></content>
      
      
      <categories>
          
          <category> Web前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建你的个人博客</title>
      <link href="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/"/>
      <url>/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="使用GitHub-page-hexo快速搭建个人博客"><a href="#使用GitHub-page-hexo快速搭建个人博客" class="headerlink" title="使用GitHub page + hexo快速搭建个人博客"></a>使用GitHub page + hexo快速搭建个人博客</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文面向无基础学生，博客为静态博客，无需费用，使用的工具和框架：GitHub Pages + hexo。</p><h4 id="为什么要搭建个人博客"><a href="#为什么要搭建个人博客" class="headerlink" title="为什么要搭建个人博客"></a>为什么要搭建个人博客</h4><span id="more"></span><ul><li>将自己的思考和学习经历记录下来作为一个知识沉淀的平台</li><li>在搭建博客和升级博客的过程中学习技术</li><li>展示你自己，并且可以作为他人了解你的渠道</li><li>成为社区的一份子，帮助到他人，博客中记录的bug和经历可以让更多的人少走弯路</li></ul><h4 id="GitHub-Pages-hexo"><a href="#GitHub-Pages-hexo" class="headerlink" title="GitHub Pages + hexo"></a>GitHub Pages + hexo</h4><p>Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。</p><p>支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>安装<a href="https://nodejs.org/zh-cn/">Node.js</a>和<a href="https://git-scm.com/">Git</a>并注册<a href="https://github.com/">GitHub</a></p><p>安装 <a href="https://link.segmentfault.com/?enc=lkF3f/CyE05tcDwXn7JWDw==.FzsCu9urplyKm66FuzB30IP26lmgUA5jiB8EdFYqqb0=">NodeJS</a>，因为 <a href="https://link.segmentfault.com/?enc=JfzEjiqjSQZA3WooMLMwgw==.hrSnx/Cxh1fRg2KdfYm5U01rcs3aD5/79tB/Lixh8gw=">Hexo</a> 是基于 Node.js 驱动的一款博客框架</p><p>安装 <a href="https://link.segmentfault.com/?enc=OZeZ9V93LS1qX7hIibSJBg==.7usyNdX/Ft0z01o+cdDa1zpaIC9WhNL2dXVB3YcpObw=">git</a>，一个分布式版本控制系统，用于项目的版本控制管理</p><p>注册<a href="https://github.com/">GitHub</a> 部署在Github Page</p><p>安装成功检验是否成功，在命令行执行下列命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> --version<span class="token function">git</span> version <span class="token number">2.36</span>.0.windows.1$ <span class="token function">node</span> --versionv16.15.1$ <span class="token function">npm</span> --version<span class="token number">8.11</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 <a href="https://link.segmentfault.com/?enc=KFP/AYOYWMJQa6qMmR5g6Q==.MuX8vOqbzEEPsphSagAlE4LcK1HT00LmCcZBvnUHhLg=">Hexo</a> 的详细文档。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment"># -g 代表着全局安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hexo的基本命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"postName"</span> <span class="token comment">#新建文章</span>hexo new page <span class="token string">"pageName"</span> <span class="token comment">#新建页面</span>hexo generate <span class="token comment">#生成静态页面至public目录</span>hexo server <span class="token comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>hexo deploy <span class="token comment">#部署到GitHub</span>hexo <span class="token builtin class-name">help</span>  <span class="token comment"># 查看帮助</span>hexo version  <span class="token comment">#查看Hexo的版本</span>对应的缩写，比如：hexo n <span class="token operator">==</span> hexo newhexo g <span class="token operator">==</span> hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>报错：</strong></p><p><code>npm WARN config global </code>–global<code>, </code>–local<code>are deprecated. Use</code>–location&#x3D;global<code> instead&quot;</code></p><p><strong>解决：</strong></p><ol><li>Go to folder <code>C:\Program Files\nodejs</code></li><li>You have to edit four files named <code>npm</code>, <code>npm.cmd</code></li><li>Open the files in a text editor, like <a href="https://en.wikipedia.org/wiki/Visual_Studio_Code">Visual Studio Code </a> or 记事本</li><li>Replace <code>prefix -g</code> with <code>prefix --location=global</code> in all four files</li><li>Save all (if asked, save as administrator)</li><li>Good to go!</li></ol><h3 id="建立博客"><a href="#建立博客" class="headerlink" title="建立博客"></a>建立博客</h3><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init blogName$ <span class="token builtin class-name">cd</span> blogName$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── _config.yml <span class="token comment"># 网站的配置信息，您可以在此配置大部分的参数。 </span>├── package.json├── scaffolds <span class="token comment"># 模版文件夹</span>├── <span class="token builtin class-name">source</span>  <span class="token comment"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><span class="token operator">|</span>   ├── _drafts <span class="token comment"># 草稿文件</span><span class="token operator">|</span>   └── _posts <span class="token comment"># 文章Markdowm文件 </span>└── themes  <span class="token comment"># 主题文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/image-20220705112740924.png" alt="image-20220705112740924"></p><h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><p>命令：hexo g</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo gINFO  Validating configINFO  Start processingINFO  Files loaded <span class="token keyword">in</span> <span class="token number">59</span> msINFO  <span class="token number">0</span> files generated <span class="token keyword">in</span> <span class="token number">17</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网页本地预览"><a href="#网页本地预览" class="headerlink" title="网页本地预览"></a>网页本地预览</h3><p>命令：hexo s</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo sINFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.INFO  See you again<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器访问上述链接：<a href="http://localhost:4000/">http://localhost:4000/</a> 预览效果</p><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/defb69f9-e4a3-4a70-881c-897425ec5726.png" alt="img"></p><p>可以看到访问没问题，但是只是在本地预览，“Press Ctrl+C to stop.” 接着将这个博客部署到github。</p><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><p><strong>新建仓库</strong>，注意！注意！注意！</p><p>一定要填写.github.io后缀 不然就创建成普通项目了</p><p>创建完成会自动生成<a href="https://link.segmentfault.com/?enc=oHQGX+DOBZxvR9rq6nqMXg==.r9aw8D1SVwglWO9wtkklGXDDb+rYBSgofnWmp6LfLGG0nprfw28pxj/IewDY74ZP">https://gongchenghuigch.githu...</a> 这样的访问地址</p><p>Github 仅能使用一个同名仓库的代码托管一个静态站点</p><blockquote><p>仓库名称格式： 用户名.github.io</p></blockquote><p>这个仓库名称将作为你github博客的访问地址<img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/1460000017990241.jpeg" alt="image"></p><p><strong>打开项目根目录下的 _config.yml 配置文件配置参数</strong></p><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/1460000017990250.jpeg" alt="image"></p><p>repository仓库地址改为自己的</p><pre class="line-numbers language-none"><code class="language-none">repository不要写成git clone的https的地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误写法：</p><pre class="line-numbers language-dts" data-language="dts"><code class="language-dts">deploy:  type: git  repository: https:&#x2F;&#x2F;github.com&#x2F;gongchenghuigch&#x2F;gongchenghuigch.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>branch看自己的github仓库是master还是main，这里是main，就填写main</p><p><img src="/2022/07/05/da-jian-ni-de-ge-ren-bo-ke/8d9b82b4-16e4-4b1e-bbbe-ce8f66b6f4da.png" alt="img"></p><p><strong>要安装一个部署插件 <a href="https://link.segmentfault.com/?enc=OSsIKOj0z3U2JHdeloUTTg==.NGsL1IMfItefEYYPOieHp6YDMoVg0i27IRcbsn2B/Elt2bWY6pnEZaiSlirvZx+p">hexo-deployer-git</a></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等一会，在浏览器访问网址： <a href="https://link.segmentfault.com/?enc=xmfM7atrIxUwr74D20foUg==.Z8NmJW38ZsSfuG+U+weOTEFGflpH/bdXEhPxNb0Nu+JysZPyqU60rF1jQ0E1xwel38V+WgsV1pAdimboR6M52A==">https:&#x2F;&#x2F;你的用户名.github.io</a> 就会看到你的博客啦！！</p><h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><p>新建一篇博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">'文章标题'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完成后可以在<code>/source/_posts</code>下看到一个“文章标题.md”的文章文件啦，<code>.md</code> 就是 Markdown 格式的文件，使用Markdown编辑器打开并编辑。</p><p>默认的内容是这样的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> chenge<span class="token punctuation">-</span>first<span class="token punctuation">-</span>blog<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-07-04 13:23:59</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">---</span>这里下方开始编写正文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始编写博客内容（markdown格式）</p><p>保存后，开始部署到github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g -d <span class="token comment"># 快速部署</span>$ hexo g <span class="token comment"># hexo generate生成生成html静态文件</span>$ hexo s <span class="token comment"># hexo server启动服务器本地预览。默认情况下，访问网址为：`http://localhost:4000/`</span>$ hexo d <span class="token comment"># hexo deploy上传到github</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可以在<code>public</code>文件夹下看到完整的静态文件。</p><p>浏览器中输入<code>http://localhost:4000/</code>就可以看到预览效果了。</p><p>启动浏览器并转到<code>https://username.github.io</code>你就可以看到自己的博客啦！</p><p>部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 &#x2F;source&#x2F;_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/05/hello-world/"/>
      <url>/2022/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Web前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
